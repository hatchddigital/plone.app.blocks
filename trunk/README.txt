Introduction
============

This package implements the 'blocks' rendering model, by providing several
transform stages that hook into ``plone.transformchain``.

The stages are:

 plone.app.blocks.parsexml (order 8000)
    Turns the response in a ``repoze.xmliter`` ``XMLSerializer`` object.
    This is then used by the subsequent stages. If the input is not HTML,
    the transformation is aborted.

 plone.app.blocks.mergepanels (order 8100)
    Looks up the page layout and executes the panel merge algorithm. Sets a
    request variable ('plone.app.blocks.merged') to indicate that it has
    done its job.
    
 plone.app.blocks.tilepage (order 8500 - option 1)
    Turns a page with a blocks rel="layout" link into a page full of tiles
    with an <?xml-stylesheet ?> PI pointing to dynamic XSLT stylesheet (see
    below). This version is only executed if the published view provides the
    ITilePageRendered interface.

 plone.app.blocks.tilepage (order 8500 - option 2)
    Resolve tiles and place them directly into the merged layout. This is the
    fallback for views that do not opt into ITilePageRendered.

 plone.app.blocks.esirender (order 8900)
    Only executed if the request key ``plone.app.blocks.esi`` is set and
    has a true value, as would be the case if any ESI-rendered tiles are
    included and ESI rendering is enabled globally. This step will serialise
    the response down to a string and perform some substitution to make ESI
    rendering work.

As shown, the ``plone.app.blocks.tilepage`` stage comes in two versions. The
simpler version just incorporates tiles into the page using a straightforward
pipeline. This is safe, but not as cacheable as the alternative version.

The version that is applied for published views that provide
``ITilePageRendered`` (e.g. the view class implements this interface) will
turn the response into a page that contains *only* the rendered tiles, with an
XSLT processing instruction referencing a dynamically generated XSLT file
(known as ``content.xsl``), which contains the static parts of the page and 
knows how to incorporate the tiles. The idea is that this file is applied
outside Plone, and can be cached separately.

The content XSLT file is generated by the ``@@blocks-static-content`` view.
This acts as an ``IPublishTraverse`` adapter that just gobbles up anything on
the sub-path. The tilepage transform stage will append the object's ``mtime``
and a ``.xsl`` suffix to the style sheet to aid caching and file type
recognition.

See ``rendering.txt`` for detailed examples of how the processing is applied,
and ``esi.txt`` for details about how Edge Side Includes can be supported.
